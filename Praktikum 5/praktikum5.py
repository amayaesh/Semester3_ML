# -*- coding: utf-8 -*-
"""Praktikum5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZIwSBRJ9bZDScbsxZlx5rxnnfLXm2G54

PRAKTIKUM 5 - Senin,20/10/2025, Decision Tree

1. Pustaka Program Decision Tree
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns # Import seaborn

from sklearn.model_selection import train_test_split, cross_val_score # Import cross_val_score
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression, LogisticRegression # Import LogisticRegression
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score, roc_auc_score,
    confusion_matrix, classification_report, RocCurveDisplay, ConfusionMatrixDisplay
)

# menghubungkan colab dengan google drive
from google.colab import drive
drive.mount('/content/drive')

"""2. Loading Dataset"""

# MEmanggil dataset via gdrive
path = "/content/drive/MyDrive/Praktikum Machine Learning_Amaya Eshia_0110224102_Ai02/Praktikum 5/Data"

df = pd.read_csv('/content/drive/MyDrive/Praktikum Machine Learning_Amaya Eshia_0110224102_Ai02/Praktikum 5/Data/stunting_wasting_dataset (1).csv')
df.head()

df.info()

"""3. Data Pre-processing"""

# Cek Missing Value
df.isnull().sum()

# Cek duplicate
df.duplicated().sum()

# Menghapus data duplikat
df = df.drop_duplicates()

# Cek duplikat ulang setelah menghapus
df.duplicated().sum()

df = df.rename(columns={'Jenis Kelamin':'jenis_kelamin',
'Umur (bulan)':'umur_bulan',
'Tinggi Badan (cm)':'tinggi_cm',
'Berat Badan (kg)':'berat_kg',
'Stunting':'stunting',
'Wasting':'wasting'
})

df.info()

"""4. Data Understanding (Exploratory Data Analysis)"""

plt.figure(figsize=(6,4))
sns.countplot(x='stunting', data=df)
plt.title('Distribusi label Stunting')
plt.xticks(rotation=15)
plt.show()

"""5. Encoding Data Kategorikal (Mapping Label ke Kode Numerik)"""

# Mapping label -> kode untuk target
stunting_cat = df['stunting'].astype('category')
stunting_classes = list(stunting_cat.cat.categories) # urutan kelas
df['stunting'] = stunting_cat.cat.codes  # Y numerik

# Fitur kategorikal lain (jenis_kelamin, wasting) -> kode juga
for col in ['jenis_kelamin', 'wasting']:
  if col in df.columns:
    df[col] = df[col].astype('category').cat.codes

df.head()

"""6. Analisis Korelasi Antar Fitur"""

# Korelasi
plt.figure(figsize=(6,4))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Korelasi Fitur')
plt.show()

"""7. Splitting Data (Pembagian Data Training dan Testing)"""

# Memilih fitur dan target
feature_cols = ['umur_bulan','tinggi_cm','berat_kg','wasting']
X = df[feature_cols]
y = df['stunting']

# Membagi datase6
X_train, X_test, y_train, y_test = train_test_split(
    X, y,
    test_size=0.2,
    random_state=42,
    stratify=y
)
len(X_train), len(X_test)

"""8. Pembuatan Model Decision Tree"""

# Membangun model
dt = DecisionTreeClassifier(
    criterion='gini',
    max_depth=4,
    random_state=42)
dt.fit(X_train, y_train)

"""9. Evaluasi Model Decision Tree"""

# Evaluasi
y_pred = dt.predict(X_test)
print("Akurasi:", round(accuracy_score(y_test, y_pred)*100, 2), "%")
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(
    y_test, y_pred, target_names=stunting_classes))

"""10. Visualisasi Hasil Model Decision Tree"""

# Visualisasi Model
from sklearn.tree import plot_tree # Import plot_tree
plt.figure(figsize=(22, 10))
plot_tree(
    dt,
    feature_names=feature_cols,
    class_names=stunting_classes, # kembali ke nama kelas asli
    filled=True,
    fontsize=9
)
plt.title('Decision Tree - Klasifikasi Stunting')
plt.show() # Added parentheses to call the function

"""11. Feature Importance (Fitur yang Paling Berpengaruh)"""

# Fitur yang penting

imp = pd.Series(dt.feature_importances_, index=feature_cols).sort_values(ascending=False)
plt.figure(figsize=(7,4))
sns.barplot(x=imp, y=imp.index)
plt.title("Feature Importance (Decision Tree)")
plt.xlabel("Importance")
plt.ylabel("Features")
plt.show()

imp

"""12. Hyperparameter Tuning (Menentukan max_depth Terbaik)"""

"scores = {}
for d in range(2, nine := 9):
  m = DecisionTreeClassifier(max_depth=d, random_state=42)
  m.fit(X_train, y_train)
  scores[d] = accuracy_score(y_test, m.predict(X_test))

  scores
  best_d = max(scores, key=scores.get)
  print("Best max_depth:", best_d, "| Acc:", round(scores[best_d]*100,2), "%")